import fs from 'fs/promises'
import path from 'path'
import dbConnect from './mongodb'
import mongoose from 'mongoose'

// CRM Data Types
export interface Client {
  id: string
  firstName: string
  lastName: string
  email: string
  phone: string
  address: string
  city: string
  state: string
  zipCode: string
  createdAt: Date
  updatedAt: Date
  projects: string[]
  notes: string
  preferredContact: 'email' | 'phone' | 'sms'
  status: 'active' | 'inactive' | 'prospect'
}

export interface Project {
  id: string
  title: string
  description: string
  clientId: string
  clientName: string
  type: 'kitchen' | 'bathroom' | 'commercial' | 'addition' | 'flooring' | 'other'
  status: 'prospect' | 'active' | 'on-hold' | 'completed' | 'cancelled'
  startDate?: Date
  endDate?: Date
  estimatedBudget?: number
  actualCost?: number
  notes: string
  createdAt: Date
  updatedAt: Date
  files: string[]
  milestones: ProjectMilestone[]
}

export interface ProjectMilestone {
  id: string
  title: string
  description: string
  dueDate: Date
  completedDate?: Date
  status: 'pending' | 'in-progress' | 'completed' | 'overdue'
  assignedTo?: string
}

export interface Activity {
  id: string
  type: 'call' | 'email' | 'sms' | 'meeting' | 'note' | 'file_upload' | 'project_update'
  title: string
  description: string
  clientId?: string
  projectId?: string
  createdBy: string
  createdAt: Date
  metadata?: Record<string, any>
}

// File paths for JSON storage (following RemodelyAz pattern)
const CRM_DATA_DIR = path.join(process.cwd(), 'data', 'crm')
const CLIENTS_FILE = path.join(CRM_DATA_DIR, 'clients.json')
const PROJECTS_FILE = path.join(CRM_DATA_DIR, 'projects.json')
const ACTIVITIES_FILE = path.join(CRM_DATA_DIR, 'activities.json')

// Ensure CRM data directory exists
async function ensureDataDirectory() {
  try {
    await fs.mkdir(CRM_DATA_DIR, { recursive: true })
  } catch (error) {
    console.error('Failed to create CRM data directory:', error)
  }
}

// Generic JSON file operations
async function readJSONFile<T>(filePath: string): Promise<T[]> {
  try {
    const data = await fs.readFile(filePath, 'utf-8')
    return JSON.parse(data)
  } catch (error) {
    return []
  }
}

async function writeJSONFile<T>(filePath: string, data: T[]): Promise<void> {
  await ensureDataDirectory()
  await fs.writeFile(filePath, JSON.stringify(data, null, 2))
}

// Client Management
export async function getAllClients(): Promise<Client[]> {
  return await readJSONFile<Client>(CLIENTS_FILE)
}

export async function getClientById(id: string): Promise<Client | null> {
  const clients = await getAllClients()
  return clients.find(client => client.id === id) || null
}

export async function createClient(clientData: Omit<Client, 'id' | 'createdAt' | 'updatedAt' | 'projects'>): Promise<Client> {
  const clients = await getAllClients()
  const newClient: Client = {
    ...clientData,
    id: generateId(),
    projects: [],
    createdAt: new Date(),
    updatedAt: new Date()
  }
  
  clients.push(newClient)
  await writeJSONFile(CLIENTS_FILE, clients)
  
  // Log activity
  await logActivity({
    type: 'note',
    title: 'New Client Added',
    description: `Client ${newClient.firstName} ${newClient.lastName} added to CRM`,
    clientId: newClient.id,
    createdBy: 'admin'
  })
  
  return newClient
}

export async function updateClient(id: string, updates: Partial<Client>): Promise<Client | null> {
  const clients = await getAllClients()
  const clientIndex = clients.findIndex(client => client.id === id)
  
  if (clientIndex === -1) return null
  
  clients[clientIndex] = {
    ...clients[clientIndex],
    ...updates,
    updatedAt: new Date()
  }
  
  await writeJSONFile(CLIENTS_FILE, clients)
  
  // Log activity
  await logActivity({
    type: 'note',
    title: 'Client Updated',
    description: `Client information updated`,
    clientId: id,
    createdBy: 'admin'
  })
  
  return clients[clientIndex]
}

// Project Management
export async function getAllProjects(): Promise<Project[]> {
  return await readJSONFile<Project>(PROJECTS_FILE)
}

export async function getProjectById(id: string): Promise<Project | null> {
  const projects = await getAllProjects()
  return projects.find(project => project.id === id) || null
}

export async function getProjectsByClientId(clientId: string): Promise<Project[]> {
  const projects = await getAllProjects()
  return projects.filter(project => project.clientId === clientId)
}

export async function createProject(projectData: Omit<Project, 'id' | 'createdAt' | 'updatedAt' | 'files' | 'milestones'>): Promise<Project> {
  const projects = await getAllProjects()
  const newProject: Project = {
    ...projectData,
    id: generateId(),
    files: [],
    milestones: [],
    createdAt: new Date(),
    updatedAt: new Date()
  }
  
  projects.push(newProject)
  await writeJSONFile(PROJECTS_FILE, projects)
  
  // Update client's projects list
  const clients = await getAllClients()
  const clientIndex = clients.findIndex(client => client.id === projectData.clientId)
  if (clientIndex !== -1) {
    clients[clientIndex].projects.push(newProject.id)
    clients[clientIndex].updatedAt = new Date()
    await writeJSONFile(CLIENTS_FILE, clients)
  }
  
  // Log activity
  await logActivity({
    type: 'project_update',
    title: 'New Project Created',
    description: `Project "${newProject.title}" created for ${newProject.clientName}`,
    clientId: newProject.clientId,
    projectId: newProject.id,
    createdBy: 'admin'
  })
  
  return newProject
}

export async function updateProject(id: string, updates: Partial<Project>): Promise<Project | null> {
  const projects = await getAllProjects()
  const projectIndex = projects.findIndex(project => project.id === id)
  
  if (projectIndex === -1) return null
  
  projects[projectIndex] = {
    ...projects[projectIndex],
    ...updates,
    updatedAt: new Date()
  }
  
  await writeJSONFile(PROJECTS_FILE, projects)
  
  // Log activity
  await logActivity({
    type: 'project_update',
    title: 'Project Updated',
    description: `Project "${projects[projectIndex].title}" updated`,
    clientId: projects[projectIndex].clientId,
    projectId: id,
    createdBy: 'admin'
  })
  
  return projects[projectIndex]
}

// Activity Logging
export async function logActivity(activityData: Omit<Activity, 'id' | 'createdAt'>): Promise<Activity> {
  const activities = await getAllActivities()
  const newActivity: Activity = {
    ...activityData,
    id: generateId(),
    createdAt: new Date()
  }
  
  activities.unshift(newActivity) // Add to beginning for reverse chronological order
  
  // Keep only last 1000 activities
  if (activities.length > 1000) {
    activities.splice(1000)
  }
  
  await writeJSONFile(ACTIVITIES_FILE, activities)
  return newActivity
}

export async function getAllActivities(): Promise<Activity[]> {
  return await readJSONFile<Activity>(ACTIVITIES_FILE)
}

export async function getActivitiesByClient(clientId: string, limit: number = 50): Promise<Activity[]> {
  const activities = await getAllActivities()
  return activities
    .filter(activity => activity.clientId === clientId)
    .slice(0, limit)
}

export async function getActivitiesByProject(projectId: string, limit: number = 50): Promise<Activity[]> {
  const activities = await getAllActivities()
  return activities
    .filter(activity => activity.projectId === projectId)
    .slice(0, limit)
}

export async function getRecentActivities(limit: number = 20): Promise<Activity[]> {
  const activities = await getAllActivities()
  return activities.slice(0, limit)
}

// Dashboard Statistics
export async function getCRMStats() {
  const clients = await getAllClients()
  const projects = await getAllProjects()
  const activities = await getAllActivities()
  
  const activeProjects = projects.filter(p => p.status === 'active')
  const completedProjects = projects.filter(p => p.status === 'completed')
  const prospectClients = clients.filter(c => c.status === 'prospect')
  const activeClients = clients.filter(c => c.status === 'active')
  
  // Calculate revenue (from completed projects)
  const totalRevenue = completedProjects.reduce((sum, project) => {
    return sum + (project.actualCost || project.estimatedBudget || 0)
  }, 0)
  
  // Get current month activities
  const currentMonth = new Date()
  const startOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1)
  const thisMonthActivities = activities.filter(activity => 
    new Date(activity.createdAt) >= startOfMonth
  )
  
  return {
    totalClients: clients.length,
    activeClients: activeClients.length,
    prospectClients: prospectClients.length,
    totalProjects: projects.length,
    activeProjects: activeProjects.length,
    completedProjects: completedProjects.length,
    totalRevenue,
    thisMonthActivities: thisMonthActivities.length,
    recentActivities: activities.slice(0, 10)
  }
}

// Utility function to generate IDs
function generateId(): string {
  return Date.now().toString(36) + Math.random().toString(36).substr(2)
}

// Initialize CRM data with sample data if empty
export async function initializeCRMData() {
  await ensureDataDirectory()
  
  const clients = await getAllClients()
  if (clients.length === 0) {
    // Create sample clients
    await createClient({
      firstName: 'John',
      lastName: 'Smith',
      email: 'john.smith@email.com',
      phone: '(480) 555-0123',
      address: '123 Main St',
      city: 'Phoenix',
      state: 'AZ',
      zipCode: '85001',
      notes: 'Interested in kitchen remodeling',
      preferredContact: 'phone',
      status: 'active'
    })
    
    await createClient({
      firstName: 'Sarah',
      lastName: 'Johnson',
      email: 'sarah.johnson@email.com',
      phone: '(480) 555-0456',
      address: '456 Oak Ave',
      city: 'Scottsdale',
      state: 'AZ',
      zipCode: '85251',
      notes: 'Bathroom renovation project',
      preferredContact: 'email',
      status: 'active'
    })
    
    console.log('✅ Sample CRM data initialized')
  }
}
